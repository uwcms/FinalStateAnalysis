Index: EGamma/EGammaAnalysisTools/plugins/ElectronIdMVAProducer.cc
===================================================================
RCS file: /local/reps/CMSSW/UserCode/EGamma/EGammaAnalysisTools/plugins/Attic/ElectronIdMVAProducer.cc,v
retrieving revision 1.4
diff -r1.4 ElectronIdMVAProducer.cc
19a20,23
> 
> #include "DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h"
> #include "DataFormats/ParticleFlowCandidate/interface/PFCandidate.h"
> 
39a44,45
>                 edm::InputTag pfCandidates_;
>                 edm::InputTag rhoSrc_;
44a51
>                 EGammaMvaEleEstimator::MVAType type_;
66a74,75
> 	pfCandidates_ = iConfig.getUntrackedParameter<edm::InputTag>("particleFlow",edm::InputTag("particleFlow"));
> 	rhoSrc_ = iConfig.getUntrackedParameter<edm::InputTag>("rhoSrc",edm::InputTag("kt6PFJets:rho"));
74,75c83,86
<  
<         EGammaMvaEleEstimator::MVAType type_;
---
> 	
> 	bool isIDISO = iConfig.getUntrackedParameter<bool>("isIDISO",false);
> 	bool isPUSUB = iConfig.getUntrackedParameter<bool>("isPUSUB",false);
> 
77c88,93
<           type_ = EGammaMvaEleEstimator::kTrig;
---
> 	  if ( isIDISO && isPUSUB ) 
> 	    type_ = EGammaMvaEleEstimator::kTrigIDIsoCombinedPUCorrected;
> 	  else if( isIDISO ) 
> 	    type_ = EGammaMvaEleEstimator::kTrigIDIsoCombined;
> 	  else 
> 	    type_ = EGammaMvaEleEstimator::kTrig;
139a156,163
> 	Handle<reco::PFCandidateCollection> pfCollection;
> 	iEvent.getByLabel(pfCandidates_,pfCollection);
> 	const reco::PFCandidateCollection pfCandidates = *pfCollection;
> 
> 	Handle<double> hRho;
> 	iEvent.getByLabel(rhoSrc_,hRho);
> 	const double Rho = *hRho;
> 
146c170,191
<           mvaVal = mvaID_->mvaValue( *egIter, *pv,thebuilder,lazyTools, verbose_);
---
> 	  switch( type_ ) {
> 	  case EGammaMvaEleEstimator::kTrig:
> 	    mvaVal = mvaID_->mvaValue( *egIter, *pv,thebuilder,lazyTools, verbose_);
> 	    break;
> 	  case EGammaMvaEleEstimator::kNonTrig:
> 	    mvaVal = mvaID_->mvaValue( *egIter, *pv,thebuilder,lazyTools, verbose_);
> 	    break;
> 	  case EGammaMvaEleEstimator::kTrigIDIsoCombined:
> 	    mvaVal = mvaID_->IDIsoCombinedMvaValue( *egIter, *pv, thebuilder, lazyTools, 
> 						    pfCandidates, Rho,
> 						    (ElectronEffectiveArea::ElectronEffectiveAreaTarget) 0, 
> 						    verbose_ );
> 	    break;
> 	  case EGammaMvaEleEstimator::kTrigIDIsoCombinedPUCorrected:
> 	    mvaVal = mvaID_->IDIsoCombinedMvaValue( *egIter, *pv,thebuilder,lazyTools, 
> 						    pfCandidates, Rho, 
> 						    (ElectronEffectiveArea::ElectronEffectiveAreaTarget) 0, 
> 						    verbose_ );
> 	    break;
> 	  default:
> 	    break;
> 	  }
